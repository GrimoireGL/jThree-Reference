{
  "type": "directory",
  "name": "markdowns",
  "children": [
    {
      "type": "file",
      "file": "簡単なプリミティブ表示",
      "content": "# 01:簡単なプリミティブ表示\n## 概要\n\n基本的なプリミティブを表示するためだけのサンプル。\n\nこのサンプルでは立体感のあるマテリアルを用いてないので、決まった一色で描画される。\n\n## コード説明\n\n### マテリアル、ジオメトリ\n\n**メッシュ = ジオメトリ + マテリアル**\n\njThreeで描画されるすべてのオブジェクトはジオメトリとマテリアルを持つ。\nジオメトリは形状を意味し、その形をなす頂点のリストや法線のリストにより成り立つ。\n\n一方、マテリアルは材質であり、どのように描画されるかを示す。\n例えば、このサンプル中での\n```xml\n<material name=\"sampleMaterial1\" type=\"builtin.solid\" color=\"yellow\"/>\n```\nは、`sampleMaterial1`という名前の`builtin.solid`という型のマテリアルを宣言している。また、このマテリアルにcolorとして`yellow`を渡している。\n\n**builtin.solid** は光源の影響を一切受けない。\n\n一方、幾つかのジオメトリはデフォルトで使用可能である。\n* cube 立方体\n* cone 円錐\n* cylinder 円柱\n* sphere 球体\n* quad 平面\n\n注意点として、どれも裏側は描画されないようになっている。\n\nメッシュを描画するには、\nsceneタグ内に\n```xml\n<mesh mat=\"sampleMaterial1\" geo=\"cube\" position=\"2,0,0\"/>\n```\nのようにmatとgeo属性をそれぞれ指定する。\n\n### レンダラー\njThreeはcanvasを自動で生成、管理する。\nあらかじめ**canvasをHTMLに置く必要はない**\n```xml\n<canvas clearColor=\"#11022A\" frame=\".canvasContainer\">\n  <viewport cam=\"CAM1\" id=\"main\" width=\"640\" height=\"480\"/>\n</canvas>\n```\n\ncanvasにはframe要素にセレクタとしてcanvasを設置したい親オブジェクトを指定する。\ncanvas内には1つ以上のviewportをとる必要がある。\nviewportを複数指定すると、複数のシーンを同一のcanvas内に描画することが可能である。\n\nviewportタグはcam属性を持つ必要がある。cam属性にはいずれかのシーン内のcameraタグのnameを指定する。\ncameraタグのnameは常にuniqueでなければならない。\n"
    },
    {
      "type": "file",
      "file": "位置、回転、拡大",
      "content": "# 02:位置、回転、拡大\n## 概要\n\n基本変形をタグ上で行うだけのサンプル\n\n## コード説明\n\n### 平行移動\n\nオブジェクトを平行移動させるにはposition属性を指定する。\nposition属性は親オブジェクトからの相対位置として解釈される。\n\npositionはVector3型をとることができる。\n\nVector3型は以下のように記述できる。\n\n1. 1,2,3 → (1,2,3)\n2. 3 → (3,3,3)\n3. n(1,1,0) → (√2,√2,0) (正規化、比率をそのままに長さを1にする)\n4. 3(1,1,0) → (3,3,0) (3倍する)\n5. 3n(1,1,0) → (3√2,3√2,0) (正規化して3倍する)\n\n### 拡大変形\n\nオブジェクトを拡大するにはscale属性を指定する。\nscale属性は親オブジェクトに対する相対スケーリングであり、Vector3型を受け入れる。\n\n### 回転\n\nオブジェクトを回転するにはrotation属性を指定する。\nrotation属性はRotation3D型を受け入れる。Rotation3D型は親オブジェクトに対する相対回転量であり、以下のような記述が可能である。\n\n1. x(30d) → x軸中心30度回転 (y,zも同様)\n2. x(1/2p) → x軸中心1/2π回転(y,zも同様)\n2. axis(30d,1,1,1) → 軸(1,1,1)中心30d回転\n3. 30d,0,0 → オイラー軸回転、30度、0度、0度\n\n以上3つの変形は同時に存在することができる。シーンオブジェクトが親子階層を持った際に変形が伝播されることに注意すること。\n"
    },
    {
      "type": "file",
      "file": "マテリアルとライト",
      "content": "# 03:マテリアルとライト\n## 概要\n\nマテリアルの中にはライトに影響を受けるものと受けないものがある。\nマテリアルの種類とライトの基礎について。\n\n## コード説明\n\n### マテリアルの種類\n\nビルドインのマテリアルには現時点で2種類(Forward shadingのプリセットのみ)存在する。\n\n* builtin.solid  特定色のマテリアル。ライトの影響を一切受けない。\n* builtin.phong  Phongシェーディング手法を利用したマテリアル。ライトの影響を受ける。\n\n#### builtin.solid\n\nこの場合、属性としてcolorのみ受け取る。colorはColor4型であり、以下のような値を取れる。\n\n* #FF0000 → 真っ赤\n* #F00 →真っ赤\n* #FF000060 → 半透明の真っ赤\n* #F006 →半透明の真っ赤\n* red → 真っ赤(HTMLやCSSで指定する色名)\n* rgb(255,0,0) →真っ赤\n* rgba(255,0,0,0.6) → 半透明の真っ赤\n\n#### builtin.phong\n\nこの属性はライトの影響を考慮するマテリアルである。\n取り得る属性は以下\n\n* diffuse 拡散色 Color4型\n* specular 反射色 Color4型(アルファ値は無視される)\n* ambient 環境色 Color4型\n* brightness 反射係数 数値(バグあり)\n\n**ただし、ライトがない場合、真っ黒になってしまうので注意すること。**\n\n今回はscenelightタグによりシーン全体を一様な光で照らしている状態になっている。\n\n### ライト\n\nマテリアルは通常、ライトと大きく関わる。\n\n#### 平行光源ライト　Directional Light (dlight)\n\ndlightタグにより平行光源によるライトを設置することができる。\n\n```xml\n  <dlight color=\"#AAA\" rotation=\"y(40d)\"/>\n```\n\n通常、dlightは(0,0,-1)方向(デフォルトではカメラが向いている方向)を指している。これを40度の角度から色#AAAからなるライトを以上のように表現できる。\n\n#### シーンライト Scene Light (scenelight)\n\nscenelightタグによりシーン全体を均一な色で照らすライトを設置することができる。\n\n```xml\n  <scenelight color=\"#333\"/>\n```\n\n上の例では#333の拡散光が常に当たる状態を示す。\n"
    },
    {
      "type": "file",
      "file": "いろんなライト",
      "content": "# 04:いろいろなライト\n## 概要\n\nライトには様々な種類がある。(ただし、バグのため動作するのは点光源のみ)\n\n## コード説明\n\n### ライト\n\nマテリアルは通常、ライトと大きく関わる。\n\n#### 点光源ライト Point Light(plight)\n\n```xml\n<plight color=\"green\" distance=\"10\" intensity=\"5\" position=\"6,0.2,0\"/>\n```\n\n色greenで、最大影響距離10、光の強さが5であることを示している。\n\nまた、decay属性に数値を指定すると減衰曲線の係数が変わる。\n\n\n#### 投射ライト Spot Light(slight)\n\nバグのため不安定\n"
    },
    {
      "type": "file",
      "file": "Xファイル",
      "content": "# 05:Xファイル\n## 概要\n\nXファイルの読み込みはデフォルトで使える。(今後プラグインとして分割予定)\n\n## コード説明\n\n### Xファイル\n\n```xml\n  <x src=\"ファイルパス\"/>\n```\n\nXファイルはシーンの要素なのでmeshと同様に扱える。\n\n既知のバグとして、半透明の描画がおかしくなることがある。\n\nまた、他のメッシュと同様にライトがない場合基本的には真っ黒になってしまうのでライトを忘れてはいけない。\n"
    },
    {
      "type": "file",
      "file": "PMXとVMD",
      "content": "# 06:PMXとVMD\n## 概要\nPMXモデルとVMDファイルも使える\n\n## コード説明\n### PMX及びVMD\n\n```xml\n<pmx src=\"/resource/model/Tune/Tune.pmx\">\n  <vmd src=\"/resource/motion/melt2.vmd\" autoSpeed=\"1.0\" enabled=\"true\"/>\n</pmx>\n```\n\nvmdは例外的にであるが、pmxの小要素として作用する。 モデルなどのリソースは、複数個同じものを読み込む際は、複数個タグを書くとパフォーマンスに響くように思えるが、自動的に一回のみの解決を行うため問題はない。\n"
    }
  ]
}