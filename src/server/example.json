{
  "type": "directory",
  "name": "markdowns",
  "children": [
    {
      "type": "file",
      "file": "Easy Sample",
      "content": "# 01: Easy Sample\n## Outline\n\nSample of basic primitive.\n\nSimple three dimensional material. It's drawn by only one color.\n\n## Explanation\n\n### Material and Geometry\n\n** mesh = geometry + material **\n\nAll objects drawn by jThree have a geometry and a material.\nGeometry means the shape, it consists of a list of normals and a list of the vertex.\n\nOn the other hand, a material indicates how it's drawn.\nFor example, in this sample:\n```xml\n<material name=\"sampleMaterial1\" type=\"builtin.solid\" color=\"yellow\"/>\n```\nThis material name is `sampleMaterial1` and type of `builtin.solid`.\n`yellow` is handed to this material as color.\n\n**builtin.solid** doesn't under influence of a light source at all.\n\nOn the other hand, several geometries are available by default.\n* cube  Cube.\n* cone  Cone.\n* cylinder  Pillar.\n* sphere  Sphere.\n* quad  Plane.\n\nThis careful point is that none is drawn in the background.\n\nTo draw mesh, in the scene tag:\n```xml\n<mesh mat=\"sampleMaterial1\" geo=\"cube\" position=\"2,0,0\"/>\n```\nSpecify the mat and geo attribute.\n\n\n### Renderer\njThree generates and manages canvas automatically.\n**You don't need to put canvas in HTML**.\n```xml\n<canvas clearColor=\"#11022A\" frame=\".canvasContainer\">\n  <viewport cam=\"CAM1\" id=\"main\" width=\"640\" height=\"480\"/>\n</canvas>\n```\n\nParent object needs be specified that we want to set canvas in frame element as selector.\nIt's necessary to take more than 1 of viewport in canvas.\nWhen the viewport is specified more than 1, it is possible to draw a number of scenes in the same canvas.\n\nviewport tag, it is necessary to have a cam attribute. The cam attribute specifies the name of the camera tag in any scenes.\nThe name of the camera tag must be unique.\n\n\n```xml\n<goml>\n  <resources>\n    <material name=\"sampleMaterial1\" type=\"builtin.solid\" color=\"yellow\"/>\n    <material name=\"sampleMaterial2\" type=\"builtin.solid\" color=\"green\"/>\n    <material name=\"sampleMaterial3\" type=\"builtin.solid\" color=\"blue\"/>\n    <material name=\"sampleMaterial4\" type=\"builtin.solid\" color=\"red\"/>\n    <material name=\"sampleMaterial5\" type=\"builtin.solid\" color=\"orange\"/>\n  </resources>\n  <canvases>\n    <canvas clearColor=\"#11022A\" frame=\".canvasContainer\">\n      <viewport cam=\"CAM1\" id=\"main\" width=\"640\" height=\"480\"/>\n    </canvas>\n  </canvases>\n  <scenes>\n    <scene name=\"mainScene\">\n      <camera id=\"maincam\" aspect=\"1\" far=\"20\" fovy=\"1/3p\" name=\"CAM1\" near=\"0.1\" position=\"(0,8,10)\" rotation=\"x(-30d)\"></camera>\n      <mesh mat=\"sampleMaterial1\" geo=\"cube\" position=\"2,0,0\"/>\n      <mesh mat=\"sampleMaterial2\" geo=\"sphere\" position=\"4,0,0\"/>\n      <mesh mat=\"sampleMaterial3\" geo=\"quad\" position=\"0,0,0\"/>\n      <mesh mat=\"sampleMaterial4\" geo=\"cone\" position=\"-2,0,0\"/>\n      <mesh mat=\"sampleMaterial5\" geo=\"cylinder\" position=\"-4,0,0\"/>\n    </scene>\n  </scenes>\n</goml>\n\n```\n"
    },
    {
      "type": "file",
      "file": "Position, Rotate, Expansion",
      "content": "# 02: Position, Rotate, Expansion\n## Summary\n\nThe sample performs basic transformation only on a tag\n\n## Explanation\n\n### Translation\n\nTo move parallel an object, we edit position attribute.\nThe position attribute is interpreted as a relative position from a parent object.\n\nposition can take a Vector3 type.\n\nWe can describe the Vector3 type as follows:\n\n1. 1,2,3 → (1,2,3)\n2. 3 → (3,3,3)\n3. n(1,1,0) → (√2,√2,0) (normalize it and just make length 1 on the same ratio)\n4. 3(1,1,0) → (3,3,0) (multiply it by three)\n5. 3n(1,1,0) → (3√2,3√2,0) (normalize it and multiply it by three)\n\n\n### Extended transformation\n\nTo scale an object, we edit scale attribute.\n\nThe scale attribute is relative scaling for the parent objects and takes a Vector3 type.\n\n### Rotate\n\nTo rotate an object, we edit position attribute.\nThe rotation attribute receives a Rotation3D type. The Rotation3D type is relative rotary quantity for the parent objects, and the following codes are possible to use:\n\n1. x(30d) → rotate 30 degrees based on x-axis (y,z-axis too)\n2. x(1/2p) → rotate π/2 radian based on x-axis (y,z-axis too)\n2. axis(30d,1,1,1) → rotate 30 degrees based on axis(1,1,1)\n3. euler(30d,0,0) → Eular angle rotation. x:30deg, y:0deg, z:0deg\n\nThese transformation can use at the same time. Be careful that scene object transformation being transmitted in the case having the parent and child hierarchy.\n\n\n\n```xml\n<goml>\n  <resources>\n    <material name=\"sampleMaterial1\" type=\"builtin.solid\" color=\"yellow\"/>\n    <material name=\"sampleMaterial2\" type=\"builtin.solid\" color=\"green\"/>\n    <material name=\"sampleMaterial3\" type=\"builtin.solid\" color=\"blue\"/>\n    <material name=\"sampleMaterial4\" type=\"builtin.solid\" color=\"red\"/>\n    <material name=\"sampleMaterial5\" type=\"builtin.solid\" color=\"orange\"/>\n  </resources>\n  <canvases>\n    <canvas clearColor=\"#11022A\" frame=\".canvasContainer\">\n      <viewport cam=\"CAM1\" id=\"main\" width=\"640\" height=\"480\"/>\n    </canvas>\n  </canvases>\n  <scenes>\n    <scene name=\"mainScene\">\n      <camera id=\"maincam\" aspect=\"1\" far=\"20\" fovy=\"1/3p\" name=\"CAM1\" near=\"0.1\" position=\"(0,8,10)\" rotation=\"x(-30d)\"></camera>\n      <mesh mat=\"sampleMaterial1\" geo=\"cube\" position=\"2,0,0\"/>\n      <mesh mat=\"sampleMaterial2\" geo=\"cube\" position=\"4,0,0\" rotation=\"y(30d)\"/>\n      <mesh mat=\"sampleMaterial3\" geo=\"cube\" position=\"0,0,-3\" scale=\"5,1,1\"/>\n      <mesh mat=\"sampleMaterial4\" geo=\"cube\" position=\"-2,0,0\" rotation=\"axis(45d,1,1,1)\"/>\n      <mesh mat=\"sampleMaterial5\" geo=\"cube\" position=\"-4,0,0\" scale=\"0.5,0.5,0.5\" rotation=\"euler(30d,0,0)\"/>\n    </scene>\n  </scenes>\n</goml>\n\n```"
    },
    {
      "type": "file",
      "file": "Material and Light",
      "content": "# 03: Material and Light\n## Outline\n\nThere are things which is under the influence of the light and under no influence.\nAbout the kind of materials and a basis of light.\n\n## Explanation\n\n### Kind of materials\n\nit exists 2 kinds of Built-in material. (Forward Shading preset only)\n\n* builtin.solid :  Material with the specific color. It isn't under inder influence of light.\n* builtin.phong :  The material which Phong Shading method was used. under influence of light.\n\n#### builtin.solid\n\nOnly color is received as the attribute in this case. color is Color4 type and can use the following value:\n\n* #FF0000 -> deep red.\n* #F00 -> deep red.\n* #FF000060->  semitransparent deep red\n* #F006 -> semitransparency deep red.\n* red -> deep red (color name designated in HTML/CSS).\n* rgb(255,0,0) -> deep red\n* rgba(255,0,0,0.6) -> semitransparent deep red\n\n#### builtin.phong\n\nThis attribute is the thing which considers influence of light.\nThe attribute which can be taken is below:\n\n* diffuse  The spread color  Color4.\n* specular  Reflected color  Color4 (Alpha value is ignored)\n* ambient  The environment color  Color4.\n* brightness  Reflection coefficient  number. (has a bug)\n\n** But, when there is no light, it becomes black, so be careful.**\n\nIt is illuminating uniformly the entire scene by scenelight tag\n\n### Light\n\nA material usually concerns light large.\n\n#### Directional Light (dlight)\n\nIt's possible to locate light by a parallel light source by a dlight tag.\n\n```xml\n  <dlight color=\"#AAA\" rotation=\"y(40d)\"/>\n```\n\ndlight is usually pointing at the (0,0,-1) direction (the direction a camera faces by default). This light which consists of the color #AAA from 40 degrees can be expressed like above.\n\n#### Scene Light (scenelight)\n\nIt's possible to locate light that lights whole scene by uniform color by using scenelight tag.\n\n```xml\n  <scenelight color=\"#333\"/>\n```\n\n<!-- 上の例では#333の拡散光が常に当たる状態を示す。 -->\n\n\n```xml\n<goml>\n  <resources>\n    <material type=\"builtin.phong\" name=\"phongMaterial1\" diffuse=\"yellow\"/>\n    <material type=\"builtin.phong\" name=\"phongMaterial2\" diffuse=\"yellow\" specular=\"green\" brightness=\"30\"/>\n    <material type=\"builtin.phong\" name=\"phongMaterial3\" diffuse=\"yellow\" specular=\"green\" brightness=\"0.1\"/>\n    <material type=\"builtin.solid\" name=\"solidMaterial\" color=\"yellow\"/>\n  </resources>\n  <canvases>\n    <canvas clearColor=\"#11022A\" frame=\".canvasContainer\">\n      <viewport cam=\"CAM1\" id=\"main\" width=\"640\" height=\"480\" name=\"MAIN\"/>\n    </canvas>\n  </canvases>\n  <scenes>\n    <scene name=\"mainScene\">\n      <camera id=\"maincam\" aspect=\"1\" far=\"20\" fovy=\"1/2p\" name=\"CAM1\" near=\"0.1\" position=\"(0,8,10)\" rotation=\"x(-30d)\"></camera>\n      <scenelight color=\"#333\"/>\n      <dlight color=\"#AAA\" rotation=\"y(40d)\"/>\n      <mesh geo=\"cube\" mat=\"phongMaterial1\" position=\"3,0,0\"/>\n      <mesh geo=\"cube\" mat=\"phongMaterial2\" position=\"3,-4,0\"/>\n      <mesh geo=\"cube\" mat=\"phongMaterial3\" position=\"3,4,0\"/>\n      <mesh geo=\"cube\" mat=\"solidMaterial\" position=\"-3,0,0\"/>\n    </scene>\n  </scenes>\n</goml>\n```\n"
    },
    {
      "type": "file",
      "file": "Valious Lights",
      "content": "# 04: Valious Lights\n## Overview\n\nThere are various types of light. (However, to work due to a bug is a point light source only)\n\n## Explanation\n\n### Light\n\nMaterials usually affects light largely.\n\n#### Point Light (plight)\n\n```xml\n<plight color=\"green\" distance=\"10\" intensity=\"5\" position=\"6,0.2,0\"/>\n```\n\nThe color green, indicating that the maximum influence distance 10, the intensity of light is 5.\n\nAlso, change the coefficients of attenuation curve by specifing a number in the decay attribute.\n\n\n#### Spot Light (slight)\n\nUnstable because of a bug\n\n\n\n```xml\n<goml>\n  <resources>\n    <material type=\"builtin.phong\" name=\"phongMaterial\" diffuse=\"white\" specular=\"pink\"/>\n  </resources>\n  <canvases>\n    <canvas clearColor=\"#11022A\" frame=\".canvasContainer\">\n      <viewport cam=\"CAM1\" id=\"main\" width=\"640\" height=\"480\" name=\"MAIN\"/>\n    </canvas>\n  </canvases>\n  <scenes>\n    <scene name=\"mainScene\">\n      <object>\n        <camera id=\"maincam\" aspect=\"1\" far=\"20\" fovy=\"1/2p\" name=\"CAM1\" near=\"0.1\" position=\"(0,8,10)\" rotation=\"x(-30d)\"></camera>\n      </object>\n      <mesh geo=\"quad\" mat=\"phongMaterial\" rotation=\"x(-90d)\" scale=\"10\"/>\n      <mesh geo=\"cube\" mat=\"phongMaterial\" scale=\"3\" position=\"-6,0,0\"/>\n      <scenelight color=\"#333\"/>\n      <plight color=\"red\" distance=\"10\" intensity=\"1\" position=\"0,0.2,0\"/>\n      <plight color=\"green\" distance=\"10\" intensity=\"5\" position=\"6,0.2,0\"/>\n      <dlight color=\"blue\" rotation=\"y(45d)\"/>\n    </scene>\n  </scenes>\n</goml>\n\n```"
    },
    {
      "type": "file",
      "file": "X files",
      "content": "# 05: X files\n\n## Overview\n\nReading of the X-Files is available by default. (in the future, we divide it as a plug-in)\n\n## Explanation\n\n### X files\n\n```xml\n  <x src=\"path/to/file\"/>\n```\n\nX-Files can be treated as mesh because of the elements of the scene.\n\nAs a known bug, sometimes semi-transparent drawing is abnormal.\n\nAlso, do not forget the light because it become black basically if there is no other mesh as well as light.\n\n```xml\n<goml>\n  <resources></resources>\n  <canvases>\n    <canvas clearColor=\"#11022A\" frame=\".canvasContainer\">\n      <viewport cam=\"CAM1\" id=\"main\" width=\"640\" height=\"480\" name=\"MAIN\"/>\n    </canvas>\n  </canvases>\n  <scenes>\n    <scene name=\"mainScene\">\n      <camera id=\"maincam\" aspect=\"1\" far=\"1000\" fovy=\"1/2p\" name=\"CAM1\" near=\"0.1\" position=\"(0,18,10)\" rotation=\"x(-30d)\"></camera>\n      <x src=\"/resource/model/X/town/ゲキド街Ver2.x\"/>\n      <dlight color=\"#AAA\" rotation=\"x(-30d)\"/>\n    </scene>\n  </scenes>\n</goml>\n```"
    },
    {
      "type": "file",
      "file": "PMX and VMD",
      "content": "# 06: PMX and VMD\n## Overview\nIt can also be used PMX model and VMD file\n\n## Explanation\n### PMX and VMD\n\n```xml\n<pmx src=\"/resource/model/Tune/Tune.pmx\">\n  <vmd src=\"/resource/motion/melt2.vmd\" autoSpeed=\"1.0\" enabled=\"true\"/>\n</pmx>\n```\n\n\nExceptionally, vmd acts as small element of pmx.\nResources, such as models, when reading a plurality same thing, it seems to resonate with the performance and write a plurality of tags, but there is no problem because it resolve automatically.\n\n```xml\n<goml>\n  <resources></resources>\n  <canvases>\n    <canvas clearColor=\"#11022A\" frame=\".canvasContainer\">\n      <viewport cam=\"CAM1\" id=\"main\" width=\"640\" height=\"480\" name=\"MAIN\"/>\n    </canvas>\n  </canvases>\n  <scenes>\n    <scene name=\"mainScene\">\n      <camera id=\"maincam\" aspect=\"1\" far=\"200\" fovy=\"1/2p\" name=\"CAM1\" near=\"0.1\" position=\"(0,16,10)\" rotation=\"x(-15d)\"></camera>\n      <pmx src=\"/resource/model/Tune/Tune.pmx\">\n        <vmd src=\"/resource/motion/melt2.vmd\" autoSpeed=\"1.0\" enabled=\"true\"/>\n      </pmx>\n      <scenelight color=\"gray\"/>\n    </scene>\n  </scenes>\n</goml>\n\n```"
    }
  ]
}